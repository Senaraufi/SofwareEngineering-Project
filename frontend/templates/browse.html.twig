{% extends 'base.html.twig' %}

{% block title %}Discover & Explore - TalkTempo{% endblock %}

{% block content %}
    <div class="min-h-screen bg-white">
        <!-- Hero Section with Animated Background -->
        <div class="relative overflow-hidden bg-gradient-to-r from-blue-200 via-indigo-200 to-purple-200 text-black">
            <!-- Animated Music Notes Background -->
            <div class="absolute inset-0 z-0 opacity-10 music-notes-bg">
                <div class="music-note absolute h-16 w-16 animate-float-slow" style="top: 15%; left: 10%">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M9 18V5l12-2v13H9zm0 0c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2z"></path></svg>
                </div>
                <div class="music-note absolute h-10 w-10 animate-float-medium" style="top: 35%; left: 25%">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M9 18V5l12-2v13H9zm0 0c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2z"></path></svg>
                </div>
                <div class="music-note absolute h-12 w-12 animate-float-fast" style="top: 20%; right: 15%">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M9 18V5l12-2v13H9zm0 0c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2z"></path></svg>
                </div>
                <div class="music-note absolute h-8 w-8 animate-float-medium" style="top: 50%; right: 25%">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M9 18V5l12-2v13H9zm0 0c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2z"></path></svg>
                </div>
                <div class="music-note absolute h-14 w-14 animate-float-slow" style="bottom: 20%; left: 20%">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M9 18V5l12-2v13H9zm0 0c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2z"></path></svg>
                </div>
                <div class="music-note absolute h-10 w-10 animate-float-fast" style="bottom: 30%; right: 10%">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M9 18V5l12-2v13H9zm0 0c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2z"></path></svg>
                </div>
            </div>
            
            <div class="container mx-auto px-4 py-20 relative z-10">
                <div class="flex flex-col items-center text-center max-w-3xl mx-auto">
                    <div class="animate-fade-in-up">
                        <h1 class="text-5xl md:text-6xl font-bold leading-tight mb-4 tracking-tight">
                            <span class="text-black">EXPLORE & DISCOVER</span>
                        </h1>
                        <div class="w-24 h-1 bg-gradient-to-r from-indigo-500 to-purple-500 mx-auto mb-8 rounded-full"></div>
                    </div>
                    
                    <div class="animate-fade-in-up animation-delay-300">
                        <h3 class="text-xl md:text-2xl font-medium mb-8 text-black">
                            Find trending content, popular discussions,<br>
                            and connect with the TalkTempo community
                        </h3>
                        
                        <!-- Search Bar with Icon and Glow Effect -->
                        <div class="flex justify-center mt-8 w-full max-w-2xl mx-auto">
                            <div class="relative w-full glow-input-container">
                                <input type="text" 
                                       id="search-input"
                                       placeholder="Search for trending topics, discussions, or content..." 
                                       class="w-full px-6 py-4 pl-12 rounded-full bg-white text-gray-800 placeholder-gray-500 border border-gray-300 focus:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-all shadow-sm"
                                >
                                <div class="absolute left-4 top-1/2 transform -translate-y-1/2">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                                    </svg>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Wave Divider with Gradient -->
            <div class="absolute bottom-0 left-0 right-0">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 120" class="w-full h-auto fill-white">
                    <path d="M0,64L80,69.3C160,75,320,85,480,80C640,75,800,53,960,48C1120,43,1280,53,1360,58.7L1440,64L1440,120L1360,120C1280,120,1120,120,960,120C800,120,640,120,480,120C320,120,160,120,80,120L0,120Z"></path>
                </svg>
            </div>
        </div>

        <!-- Filter and Browse Controls -->
        <div class="container mx-auto px-4 py-8">
            <div class="flex flex-wrap items-center justify-between gap-4 mb-8">
                <div class="flex items-center space-x-3">
                    <h2 class="text-2xl font-bold text-gray-900">Artist Collection</h2>
                    <div class="px-3 py-1 bg-gradient-to-r from-indigo-100 to-purple-100 text-indigo-800 rounded-full text-sm font-medium shadow-sm">
                        <span class="items-count">{{ artists|length }}</span> artists
                    </div>
                </div>
                
                <div class="flex flex-wrap gap-3">
                    <!-- Filter Dropdown -->
                    <div class="relative">
                        <button id="filter-dropdown" class="flex items-center px-4 py-2 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 transition-colors group">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-indigo-500 group-hover:text-indigo-600 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
                            </svg>
                            <span class="text-gray-700 group-hover:text-gray-900 transition-colors">Filter</span>
                            <span class="filter-badge hidden ml-2 px-2 py-0.5 bg-indigo-100 text-indigo-800 text-xs rounded-full">0</span>
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2 text-gray-500 group-hover:text-gray-700 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                            </svg>
                        </button>
                        <div id="filter-menu" class="hidden absolute right-0 mt-2 w-72 bg-white rounded-lg shadow-xl z-10 border border-gray-200 transform transition-all duration-200 opacity-0 scale-95">
                            <div class="p-4">
                                <div class="flex justify-between items-center mb-3">
                                    <h3 class="font-semibold text-gray-900">Filters</h3>
                                    <button id="clear-filters" class="text-xs text-indigo-600 hover:text-indigo-800 transition-colors">
                                        Clear all
                                    </button>
                                </div>
                                
                                <div class="mb-4">
                                    <h4 class="font-medium text-gray-900 mb-2 text-sm uppercase tracking-wider">Genre</h4>
                                    <div class="space-y-2 max-h-40 overflow-y-auto pr-2 filter-scrollbar">
                                        <label class="flex items-center hover:bg-gray-50 p-1 rounded transition-colors cursor-pointer">
                                            <input type="checkbox" class="genre-filter form-checkbox h-4 w-4 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500" value="rock">
                                            <span class="ml-2 text-gray-700">Rock</span>
                                        </label>
                                        <label class="flex items-center hover:bg-gray-50 p-1 rounded transition-colors cursor-pointer">
                                            <input type="checkbox" class="genre-filter form-checkbox h-4 w-4 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500" value="metal">
                                            <span class="ml-2 text-gray-700">Metal</span>
                                        </label>
                                        <label class="flex items-center hover:bg-gray-50 p-1 rounded transition-colors cursor-pointer">
                                            <input type="checkbox" class="genre-filter form-checkbox h-4 w-4 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500" value="pop">
                                            <span class="ml-2 text-gray-700">Pop</span>
                                        </label>
                                        <label class="flex items-center hover:bg-gray-50 p-1 rounded transition-colors cursor-pointer">
                                            <input type="checkbox" class="genre-filter form-checkbox h-4 w-4 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500" value="k-pop">
                                            <span class="ml-2 text-gray-700">K-Pop</span>
                                        </label>
                                        <label class="flex items-center hover:bg-gray-50 p-1 rounded transition-colors cursor-pointer">
                                            <input type="checkbox" class="genre-filter form-checkbox h-4 w-4 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500" value="hip hop">
                                            <span class="ml-2 text-gray-700">Hip Hop</span>
                                        </label>
                                        <label class="flex items-center hover:bg-gray-50 p-1 rounded transition-colors cursor-pointer">
                                            <input type="checkbox" class="genre-filter form-checkbox h-4 w-4 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500" value="electronic">
                                            <span class="ml-2 text-gray-700">Electronic</span>
                                        </label>
                                        <label class="flex items-center hover:bg-gray-50 p-1 rounded transition-colors cursor-pointer">
                                            <input type="checkbox" class="genre-filter form-checkbox h-4 w-4 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500" value="r&b">
                                            <span class="ml-2 text-gray-700">R&B</span>
                                        </label>
                                        <label class="flex items-center hover:bg-gray-50 p-1 rounded transition-colors cursor-pointer">
                                            <input type="checkbox" class="genre-filter form-checkbox h-4 w-4 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500" value="progressive rock">
                                            <span class="ml-2 text-gray-700">Progressive Rock</span>
                                        </label>
                                    </div>
                                </div>
                                
                                <div>
                                    <h4 class="font-medium text-gray-900 mb-2 text-sm uppercase tracking-wider">Decade</h4>
                                    <div class="space-y-2">
                                        <label class="flex items-center hover:bg-gray-50 p-1 rounded transition-colors cursor-pointer">
                                            <input type="checkbox" class="decade-filter form-checkbox h-4 w-4 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500" value="2020">
                                            <span class="ml-2 text-gray-700">2020s</span>
                                        </label>
                                        <label class="flex items-center hover:bg-gray-50 p-1 rounded transition-colors cursor-pointer">
                                            <input type="checkbox" class="decade-filter form-checkbox h-4 w-4 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500" value="2010">
                                            <span class="ml-2 text-gray-700">2010s</span>
                                        </label>
                                        <label class="flex items-center hover:bg-gray-50 p-1 rounded transition-colors cursor-pointer">
                                            <input type="checkbox" class="decade-filter form-checkbox h-4 w-4 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500" value="2000">
                                            <span class="ml-2 text-gray-700">2000s</span>
                                        </label>
                                        <label class="flex items-center hover:bg-gray-50 p-1 rounded transition-colors cursor-pointer">
                                            <input type="checkbox" class="decade-filter form-checkbox h-4 w-4 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500" value="1990">
                                            <span class="ml-2 text-gray-700">1990s</span>
                                        </label>
                                        <label class="flex items-center hover:bg-gray-50 p-1 rounded transition-colors cursor-pointer">
                                            <input type="checkbox" class="decade-filter form-checkbox h-4 w-4 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500" value="1980">
                                            <span class="ml-2 text-gray-700">1980s</span>
                                        </label>
                                        <label class="flex items-center hover:bg-gray-50 p-1 rounded transition-colors cursor-pointer">
                                            <input type="checkbox" class="decade-filter form-checkbox h-4 w-4 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500" value="1970">
                                            <span class="ml-2 text-gray-700">1970s</span>
                                        </label>
                                        <label class="flex items-center hover:bg-gray-50 p-1 rounded transition-colors cursor-pointer">
                                            <input type="checkbox" class="decade-filter form-checkbox h-4 w-4 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500" value="1960">
                                            <span class="ml-2 text-gray-700">1960s</span>
                                        </label>
                                    </div>
                                </div>
                                
                                <!-- Apply Filters Button -->
                                <div class="mt-4 pt-3 border-t border-gray-200">
                                    <button id="apply-filters" class="w-full py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg transition-colors font-medium text-sm">
                                        Apply Filters
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Sort Dropdown -->
                    <div class="relative">
                        <button id="sort-dropdown" class="flex items-center px-4 py-2 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 transition-colors group">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-indigo-500 group-hover:text-indigo-600 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4h13M3 8h9m-9 4h6m4 0l4-4m0 0l4 4m-4-4v12" />
                            </svg>
                            <span class="text-gray-700 group-hover:text-gray-900 transition-colors">Sort</span>
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2 text-gray-500 group-hover:text-gray-700 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                            </svg>
                        </button>
                        <div id="sort-menu" class="hidden absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-xl z-10 border border-gray-200 transform transition-all duration-200 opacity-0 scale-95">
                            <div class="p-2">
                                <button class="sort-option w-full text-left px-4 py-2 rounded hover:bg-indigo-50 transition-colors flex items-center" data-sort="newest">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                    Newest First
                                </button>
                                <button class="sort-option w-full text-left px-4 py-2 rounded hover:bg-indigo-50 transition-colors flex items-center" data-sort="oldest">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                    Oldest First
                                </button>
                                <button class="sort-option w-full text-left px-4 py-2 rounded hover:bg-indigo-50 transition-colors flex items-center" data-sort="a-z">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4h13M3 8h9m-9 4h9m5-4v12m0 0l-4-4m4 4l4-4" />
                                    </svg>
                                    A-Z
                                </button>
                                <button class="sort-option w-full text-left px-4 py-2 rounded hover:bg-indigo-50 transition-colors flex items-center" data-sort="z-a">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4h13M3 8h9m-9 4h6m4 0l4-4m0 0l4 4m-4-4v12" />
                                    </svg>
                                    Z-A
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- View Toggle -->
                    <div class="flex rounded-lg border border-gray-300 overflow-hidden shadow-sm">
                        <button class="px-4 py-2 bg-indigo-600 text-white hover:bg-indigo-700 transition-colors flex items-center" id="grid-view">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
                            </svg>
                            <span class="ml-2 hidden sm:inline">Grid</span>
                        </button>
                        <button class="px-4 py-2 bg-white text-gray-700 hover:bg-gray-50 transition-colors flex items-center" id="list-view">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                            </svg>
                            <span class="ml-2 hidden sm:inline">List</span>
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- Browse Categories -->
            <div class="border-b border-gray-200 mb-8">
                <nav class="-mb-px flex space-x-8">
                    <a href="#" class="category-tab group border-indigo-600 text-indigo-600 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm flex items-center" data-category="artists">
                        Artists
                        <span class="ml-2 px-2 py-0.5 bg-indigo-100 text-indigo-800 rounded-full text-xs group-hover:bg-indigo-200 transition-colors">
                            {{ artists|length }}
                        </span>
                    </a>
                    <a href="/albums" class="group border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm flex items-center">
                        Albums
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 text-gray-400 group-hover:text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                        </svg>
                    </a>
                </nav>
            </div>
        </div>

        <!-- Artists Section with Enhanced Design -->
        <div class="container mx-auto px-4 pb-16" id="artists-section">
            <div class="flex justify-between items-center mb-8">
                <h2 class="text-3xl font-bold text-gray-900">Featured Artists</h2>
            </div>
            
            <!-- Grid View (Default) -->
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6" id="artists-grid">
                {% for artist in artists %}
                    <div class="artist-card bg-white rounded-xl overflow-hidden shadow-lg transition-all duration-300 hover:shadow-2xl border border-gray-100 group flex flex-col h-full">
                        <div class="aspect-square overflow-hidden relative">
                            <a href="/artist/{{ artist.getId() }}" class="block">
                                <img src="{{ artist.getImageUrl()|default('/assets/images/' ~ artist.getName()|lower|replace({' ': '-'}) ~ '-artist.jpg') }}" alt="{{ artist.getName() }}" 
                                     class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110" onerror="this.src='/assets/images/default-artist.jpg';">
                                
                                <!-- Hover Overlay -->
                                <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-end justify-center p-4">
                                    <div class="bg-white/20 backdrop-blur-sm px-4 py-2 rounded-full transform translate-y-4 group-hover:translate-y-0 transition-transform duration-300">
                                        <span class="text-white font-medium">View Profile</span>
                                    </div>
                                </div>
                            </a>
                        </div>
                        
                        <div class="p-5 flex-grow flex flex-col">
                            <div class="flex justify-between items-start mb-2">
                                <h3 class="text-lg font-bold text-gray-900 hover:text-indigo-600 transition-colors artist-name">{{ artist.getName() }}</h3>
                                <div class="flex items-center space-x-1 text-amber-500">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                    </svg>
                                    <span class="text-sm font-medium">4.9</span>
                                </div>
                            </div>
                            
                            <div class="flex flex-wrap gap-1 mb-4">
                                {% if artist.getGenres() %}
                                    {% for genre in artist.getGenres()|slice(0, 3) %}
                                        <span class="px-2 py-1 bg-indigo-100 text-indigo-800 rounded-full text-xs font-medium">{{ genre }}</span>
                                    {% endfor %}
                                {% endif %}
                            </div>
                            
                            <div class="flex items-center text-gray-600 text-sm mb-4">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
                                </svg>
                                <span>{{ random(3, 12) }} Albums</span>
                            </div>
                            
                            <div class="mt-auto">
                                <a href="/artist/{{ artist.getId() }}" class="block w-full bg-indigo-600 hover:bg-indigo-700 text-white py-2 rounded-lg text-center font-medium transition-colors">
                                    View Artist
                                </a>
                            </div>
                        </div>
                    </div>
                {% endfor %}
            </div>
            
            <!-- List View (Hidden by Default) -->
            <div class="hidden space-y-6" id="artists-list">
                {% for artist in artists %}
                    <div class="artist-card bg-white rounded-xl overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 border border-gray-100 flex flex-row">
                        <!-- Artist Image -->
                        <div class="w-24 h-24 md:w-32 md:h-32 relative overflow-hidden flex-shrink-0 artist-image">
                            <a href="/artist/{{ artist.getId() }}">
                                <img src="{{ artist.getImageUrl()|default('/assets/images/' ~ artist.getName()|lower|replace({' ': '-'}) ~ '-artist.jpg') }}" alt="{{ artist.getName() }}" class="w-full h-full object-cover transition-transform duration-500 hover:scale-110" onerror="this.src='/assets/images/default-artist.jpg';">
                                <div class="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-30 transition-all duration-300 flex items-center justify-center">
                                    <div class="transform translate-y-8 opacity-0 hover:translate-y-0 hover:opacity-100 transition-all duration-300">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                        </svg>
                                    </div>
                                </div>
                            </a>
                        </div>
                        
                        <!-- Artist Info -->
                        <div class="p-6 flex-grow flex flex-col justify-between">
                            <div>
                                <div class="flex justify-between items-start mb-2">
                                    <div>
                                        <h3 class="text-xl font-bold text-gray-900 hover:text-indigo-600 transition-colors artist-name">{{ artist.getName() }}</h3>
                                    </div>
                                    <div class="flex items-center space-x-1 text-amber-500">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                        </svg>
                                        <span class="text-sm font-medium">4.9</span>
                                    </div>
                                </div>
                                
                                <div class="flex items-center text-gray-600 text-sm mb-3">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
                                    </svg>
                                    <span>{{ random(3, 12) }} Albums</span>
                                </div>
                                
                                <!-- Artist Tags -->
                                <div class="flex flex-wrap gap-2 mb-4">
                                    {% if artist.getGenres() %}
                                        {% for genre in artist.getGenres() %}
                                            <span class="px-2 py-1 bg-indigo-100 text-indigo-800 rounded-full text-xs font-medium">{{ genre }}</span>
                                        {% endfor %}
                                    {% endif %}
                                </div>
                                
                                <p class="text-gray-600 mb-4 line-clamp-2">{{ artist.getName() }} is a renowned artist known for their unique style and powerful performances. Their music has captivated audiences worldwide.</p>
                            </div>
                            
                            <div class="flex gap-4 mt-auto">
                                <a href="/artist/{{ artist.getId() }}" class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors text-center font-medium md:max-w-[150px] flex items-center justify-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                    </svg>
                                    View Profile
                                </a>
                                <a href="/artist/{{ artist.getId() }}/albums" class="border border-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50 transition-colors text-center font-medium md:max-w-[150px] flex items-center justify-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
                                    </svg>
                                    View Albums
                                </a>
                            </div>
                        </div>
                    </div>
                {% endfor %}
            </div>
            
            <!-- Empty State (Hidden by Default) -->
            <div id="empty-search-state" class="hidden py-16 text-center">
                <div class="mx-auto w-24 h-24 mb-6 text-gray-300">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                    </svg>
                </div>
                <h3 class="text-xl font-semibold text-gray-800 mb-2">No results found</h3>
                <p class="text-gray-600 mb-6">We couldn't find any artists matching your search criteria.</p>
                <button id="reset-search" class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors inline-flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                    Reset Search
                </button>
            </div>
        </div>

       

        <!-- Newsletter Section with Gradient Background -->
        <div class="bg-gradient-to-r from-indigo-600 to-purple-600 py-16 mt-16 relative overflow-hidden">
            <!-- Decorative Elements -->
            <div class="absolute top-0 left-0 w-full h-full opacity-10">
                <div class="absolute top-10 left-10 w-40 h-40 rounded-full bg-white"></div>
                <div class="absolute bottom-10 right-10 w-60 h-60 rounded-full bg-white"></div>
                <div class="absolute top-1/2 left-1/4 w-20 h-20 rounded-full bg-white"></div>
            </div>
            
            <div class="container mx-auto px-4 max-w-4xl text-center relative z-10">
                <h2 class="text-3xl font-bold mb-4 text-white">Stay Updated with New Music</h2>
                <p class="text-white/80 mb-8 max-w-2xl mx-auto text-base leading-relaxed">
                    Subscribe to our newsletter to receive updates on new albums, artist spotlights, and exclusive content delivered straight to your inbox.
                </p>
                <div class="flex flex-col sm:flex-row justify-center gap-4 max-w-lg mx-auto">
                    <input type="email" placeholder="Your email address" class="px-6 py-3 rounded-lg bg-white/20 backdrop-blur-sm text-white placeholder-white/70 border border-white/30 focus:outline-none focus:ring-2 focus:ring-white/50 flex-grow">
                    <button class="px-6 py-3 bg-white text-indigo-600 rounded-lg hover:bg-indigo-100 transition-colors duration-300 font-medium shadow-md whitespace-nowrap">
                        Subscribe Now
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- JavaScript for Interactive Features -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add animation styles
            const style = document.createElement('style');
            style.textContent = `
                @keyframes float-slow {
                    0% { transform: translateY(0px) rotate(0deg); }
                    50% { transform: translateY(-15px) rotate(5deg); }
                    100% { transform: translateY(0px) rotate(0deg); }
                }
                @keyframes float-medium {
                    0% { transform: translateY(0px) rotate(0deg); }
                    50% { transform: translateY(-10px) rotate(-5deg); }
                    100% { transform: translateY(0px) rotate(0deg); }
                }
                @keyframes float-fast {
                    0% { transform: translateY(0px) rotate(0deg); }
                    50% { transform: translateY(-8px) rotate(3deg); }
                    100% { transform: translateY(0px) rotate(0deg); }
                }
                @keyframes fade-in-up {
                    0% { opacity: 0; transform: translateY(20px); }
                    100% { opacity: 1; transform: translateY(0); }
                }
                .animate-float-slow {
                    animation: float-slow 8s ease-in-out infinite;
                }
                .animate-float-medium {
                    animation: float-medium 6s ease-in-out infinite;
                }
                .animate-float-fast {
                    animation: float-fast 4s ease-in-out infinite;
                }
                .animate-fade-in-up {
                    animation: fade-in-up 0.6s ease-out forwards;
                }
                .animation-delay-300 {
                    animation-delay: 0.3s;
                }
                .glow-input:focus {
                    box-shadow: 0 0 15px rgba(255, 255, 255, 0.3);
                }
                .filter-scrollbar {
                    scrollbar-width: thin;
                    scrollbar-color: rgba(156, 163, 175, 0.5) transparent;
                }
                .filter-scrollbar::-webkit-scrollbar {
                    width: 6px;
                }
                .filter-scrollbar::-webkit-scrollbar-track {
                    background: transparent;
                }
                .filter-scrollbar::-webkit-scrollbar-thumb {
                    background-color: rgba(156, 163, 175, 0.5);
                    border-radius: 20px;
                }
            `;
            document.head.appendChild(style);
            
            // Filter dropdown toggle
            const filterDropdown = document.getElementById('filter-dropdown');
            const filterMenu = document.getElementById('filter-menu');
            const sortDropdown = document.getElementById('sort-dropdown');
            const sortMenu = document.getElementById('sort-menu');
            
            function toggleDropdown(dropdown, menu) {
                menu.classList.toggle('hidden');
                if (!menu.classList.contains('hidden')) {
                    menu.classList.remove('opacity-0', 'scale-95');
                    menu.classList.add('opacity-100', 'scale-100');
                } else {
                    menu.classList.add('opacity-0', 'scale-95');
                    menu.classList.remove('opacity-100', 'scale-100');
                }
            }
            
            if (filterDropdown && filterMenu) {
                filterDropdown.addEventListener('click', function(e) {
                    e.preventDefault();
                    toggleDropdown(filterDropdown, filterMenu);
                    if (sortMenu && !sortMenu.classList.contains('hidden')) {
                        sortMenu.classList.add('hidden');
                    }
                });
            }
            
            if (sortDropdown && sortMenu) {
                sortDropdown.addEventListener('click', function(e) {
                    e.preventDefault();
                    toggleDropdown(sortDropdown, sortMenu);
                    if (filterMenu && !filterMenu.classList.contains('hidden')) {
                        filterMenu.classList.add('hidden');
                    }
                });
            }
            
            // Close dropdowns when clicking outside
            document.addEventListener('click', function(event) {
                if (filterDropdown && filterMenu && !filterDropdown.contains(event.target) && !filterMenu.contains(event.target)) {
                    filterMenu.classList.add('hidden');
                }
                if (sortDropdown && sortMenu && !sortDropdown.contains(event.target) && !sortMenu.contains(event.target)) {
                    sortMenu.classList.add('hidden');
                }
            });
            
            // Category tabs functionality
            const categoryTabs = document.querySelectorAll('.category-tab');
            const artistsSection = document.getElementById('artists-section');
            const albumsSection = document.getElementById('albums-section');
            
            if (categoryTabs.length && artistsSection && albumsSection) {
                categoryTabs.forEach(tab => {
                    tab.addEventListener('click', function(e) {
                        e.preventDefault();
                        // Remove active class from all tabs
                        categoryTabs.forEach(t => {
                            t.classList.remove('border-indigo-600', 'text-indigo-600');
                            t.classList.add('border-transparent', 'text-gray-500');
                            
                            // Change counter style
                            const counter = t.querySelector('span');
                            if (counter) {
                                counter.classList.remove('bg-indigo-100', 'text-indigo-800');
                                counter.classList.add('bg-gray-100', 'text-gray-600');
                            }
                        });
                        
                        // Add active class to clicked tab
                        this.classList.remove('border-transparent', 'text-gray-500');
                        this.classList.add('border-indigo-600', 'text-indigo-600');
                        
                        // Change counter style
                        const counter = this.querySelector('span');
                        if (counter) {
                            counter.classList.remove('bg-gray-100', 'text-gray-600');
                            counter.classList.add('bg-indigo-100', 'text-indigo-800');
                        }
                        
                        // Show/hide sections based on selected category
                        const category = this.getAttribute('data-category');
                        if (category === 'all') {
                            artistsSection.style.display = 'block';
                            albumsSection.style.display = 'block';
                        } else if (category === 'artists') {
                            artistsSection.style.display = 'block';
                            albumsSection.style.display = 'none';
                        } else if (category === 'albums') {
                            artistsSection.style.display = 'none';
                            albumsSection.style.display = 'block';
                        }
                    });
                });
            }
            
            // Grid/List View Toggle
            const gridViewBtn = document.getElementById('grid-view');
            const listViewBtn = document.getElementById('list-view');
            const artistsGrid = document.getElementById('artists-grid');
            const artistsList = document.getElementById('artists-list');
            
            if (gridViewBtn && listViewBtn && artistsGrid && artistsList) {
                // Grid view (default)
                gridViewBtn.addEventListener('click', function() {
                    artistsGrid.classList.remove('hidden');
                    artistsList.classList.add('hidden');
                    
                    // Update active button styles
                    gridViewBtn.classList.remove('bg-white', 'text-gray-700');
                    gridViewBtn.classList.add('bg-indigo-600', 'text-white');
                    listViewBtn.classList.remove('bg-indigo-600', 'text-white');
                    listViewBtn.classList.add('bg-white', 'text-gray-700');
                    
                    // Save preference to localStorage
                    localStorage.setItem('artistViewPreference', 'grid');
                });
                
                // List view
                listViewBtn.addEventListener('click', function() {
                    artistsGrid.classList.add('hidden');
                    artistsList.classList.remove('hidden');
                    
                    // Update active button styles
                    listViewBtn.classList.remove('bg-white', 'text-gray-700');
                    listViewBtn.classList.add('bg-indigo-600', 'text-white');
                    gridViewBtn.classList.remove('bg-indigo-600', 'text-white');
                    gridViewBtn.classList.add('bg-white', 'text-gray-700');
                    
                    // Save preference to localStorage
                    localStorage.setItem('artistViewPreference', 'list');
                });
                
                // Load user preference if exists
                const viewPreference = localStorage.getItem('artistViewPreference');
                if (viewPreference === 'list') {
                    listViewBtn.click();
                }
            }
            
            if (gridViewBtn && listViewBtn && albumGrid) {
                gridViewBtn.addEventListener('click', function() {
                    // Activate grid view button
                    gridViewBtn.classList.remove('bg-white', 'text-gray-700');
                    gridViewBtn.classList.add('bg-indigo-600', 'text-white');
                    listViewBtn.classList.remove('bg-indigo-600', 'text-white');
                    listViewBtn.classList.add('bg-white', 'text-gray-700');
                    
                    // Change grid layout
                    albumGrid.classList.remove('grid-cols-1');
                    albumGrid.classList.add('grid-cols-1', 'sm:grid-cols-2', 'md:grid-cols-3', 'lg:grid-cols-4', 'xl:grid-cols-5');
                    
                    // Change card style for grid view
                    const albumCards = albumGrid.querySelectorAll('.album-card');
                    albumCards.forEach(card => {
                        card.classList.remove('flex', 'flex-row');
                        card.classList.add('flex-col');
                        
                        const imageContainer = card.querySelector('.album-image');
                        if (imageContainer) {
                            imageContainer.classList.remove('w-24', 'h-24', 'md:w-32', 'md:h-32');
                            imageContainer.classList.add('w-full', 'aspect-square');
                        }
                    });
                });
                
                listViewBtn.addEventListener('click', function() {
                    // Activate list view button
                    listViewBtn.classList.remove('bg-white', 'text-gray-700');
                    listViewBtn.classList.add('bg-indigo-600', 'text-white');
                    gridViewBtn.classList.remove('bg-indigo-600', 'text-white');
                    gridViewBtn.classList.add('bg-white', 'text-gray-700');
                    
                    // Change grid layout
                    albumGrid.classList.remove('sm:grid-cols-2', 'md:grid-cols-3', 'lg:grid-cols-4', 'xl:grid-cols-5');
                    albumGrid.classList.add('grid-cols-1');
                    
                    // Change card style for list view
                    const albumCards = albumGrid.querySelectorAll('.album-card');
                    albumCards.forEach(card => {
                        card.classList.remove('flex-col');
                        card.classList.add('flex', 'flex-row');
                        
                        const imageContainer = card.querySelector('.album-image');
                        if (imageContainer) {
                            imageContainer.classList.remove('w-full', 'aspect-square');
                            imageContainer.classList.add('w-24', 'h-24', 'md:w-32', 'md:h-32');
                        }
                    });
                });
            }
            
            // Filter functionality
            const genreFilters = document.querySelectorAll('.genre-filter');
            const decadeFilters = document.querySelectorAll('.decade-filter');
            const applyFiltersBtn = document.getElementById('apply-filters');
            const clearFiltersBtn = document.getElementById('clear-filters');
            const filterBadge = document.querySelector('.filter-badge');
            const allItems = document.querySelectorAll('#artists-section .grid > div, #albums-section .grid > div');
            const itemsCount = document.querySelector('.items-count');
            
            let activeFilters = {
                genres: [],
                decades: []
            };
            
            function updateFilterBadge() {
                const totalFilters = activeFilters.genres.length + activeFilters.decades.length;
                if (totalFilters > 0) {
                    filterBadge.textContent = totalFilters;
                    filterBadge.classList.remove('hidden');
                } else {
                    filterBadge.classList.add('hidden');
                }
            }
            
            function applyFilters() {
                let visibleCount = 0;
                
                allItems.forEach(item => {
                    const genre = item.querySelector('.text-indigo-500, .text-indigo-800')?.textContent.toLowerCase() || '';
                    const releaseText = item.querySelector('.text-gray-500')?.textContent || '';
                    const yearMatch = releaseText.match(/(19|20)\d{2}/);
                    const year = yearMatch ? yearMatch[0] : '';
                    const decade = year ? year.substring(0, 3) + '0' : '';
                    
                    const matchesGenre = activeFilters.genres.length === 0 || 
                                      activeFilters.genres.some(g => genre.includes(g.toLowerCase()));
                    const matchesDecade = activeFilters.decades.length === 0 || 
                                       activeFilters.decades.includes(decade.substring(0, 3));
                    
                    if (matchesGenre && matchesDecade) {
                        item.style.display = '';
                        visibleCount++;
                    } else {
                        item.style.display = 'none';
                    }
                });
                
                if (itemsCount) {
                    itemsCount.textContent = visibleCount;
                }
                
                // Close filter menu
                if (filterMenu) {
                    filterMenu.classList.add('hidden');
                }
            }
            
            if (genreFilters.length && applyFiltersBtn) {
                genreFilters.forEach(filter => {
                    filter.addEventListener('change', function() {
                        const genre = this.value;
                        if (this.checked) {
                            activeFilters.genres.push(genre);
                        } else {
                            activeFilters.genres = activeFilters.genres.filter(g => g !== genre);
                        }
                        updateFilterBadge();
                    });
                });
            }
            
            if (decadeFilters.length) {
                decadeFilters.forEach(filter => {
                    filter.addEventListener('change', function() {
                        const decade = this.value;
                        if (this.checked) {
                            activeFilters.decades.push(decade);
                        } else {
                            activeFilters.decades = activeFilters.decades.filter(d => d !== decade);
                        }
                        updateFilterBadge();
                    });
                });
            }
            
            if (applyFiltersBtn) {
                applyFiltersBtn.addEventListener('click', applyFilters);
            }
            
            if (clearFiltersBtn) {
                clearFiltersBtn.addEventListener('click', function() {
                    genreFilters.forEach(filter => {
                        filter.checked = false;
                    });
                    decadeFilters.forEach(filter => {
                        filter.checked = false;
                    });
                    activeFilters.genres = [];
                    activeFilters.decades = [];
                    updateFilterBadge();
                    
                    // Show all items
                    allItems.forEach(item => {
                        item.style.display = '';
                    });
                    
                    if (itemsCount) {
                        itemsCount.textContent = allItems.length;
                    }
                });
            }
            
            // Sort functionality
            const sortOptions = document.querySelectorAll('.sort-option');
            
            function sortItems(sortBy) {
                const albumsContainer = document.querySelector('#albums-section .grid');
                const albumItems = Array.from(albumsContainer.children);
                
                albumItems.sort((a, b) => {
                    const titleA = a.querySelector('h3').textContent.toLowerCase();
                    const titleB = b.querySelector('h3').textContent.toLowerCase();
                    const releaseTextA = a.querySelector('.text-gray-500')?.textContent || '';
                    const releaseTextB = b.querySelector('.text-gray-500')?.textContent || '';
                    const yearMatchA = releaseTextA.match(/(19|20)\d{2}/);
                    const yearMatchB = releaseTextB.match(/(19|20)\d{2}/);
                    const yearA = yearMatchA ? parseInt(yearMatchA[0]) : 0;
                    const yearB = yearMatchB ? parseInt(yearMatchB[0]) : 0;
                    
                    if (sortBy === 'a-z') {
                        return titleA.localeCompare(titleB);
                    } else if (sortBy === 'z-a') {
                        return titleB.localeCompare(titleA);
                    } else if (sortBy === 'newest') {
                        return yearB - yearA;
                    } else if (sortBy === 'oldest') {
                        return yearA - yearB;
                    }
                    return 0;
                });
                
                // Re-append sorted items
                albumItems.forEach(item => {
                    albumsContainer.appendChild(item);
                });
                
                // Close sort menu
                if (sortMenu) {
                    sortMenu.classList.add('hidden');
                }
            }
            
            if (sortOptions.length) {
                sortOptions.forEach(option => {
                    option.addEventListener('click', function() {
                        const sortBy = this.getAttribute('data-sort');
                        sortItems(sortBy);
                    });
                });
            }
            
            // Search functionality
            const searchInput = document.getElementById('search-input');
            const artistCards = document.querySelectorAll('.artist-card');
            const emptySearchState = document.getElementById('empty-search-state');
            const resetSearchBtn = document.getElementById('reset-search');
            
            if (searchInput) {
                searchInput.addEventListener('input', function() {
                    const searchTerm = this.value.toLowerCase().trim();
                    let visibleCount = 0;
                    
                    // Filter artists
                    artistCards.forEach(card => {
                        const artistName = card.querySelector('.artist-name').textContent.toLowerCase();
                        const artistGenres = Array.from(card.querySelectorAll('.bg-indigo-100')).map(genre => genre.textContent.toLowerCase());
                        
                        if (searchTerm === '' || artistName.includes(searchTerm) || artistGenres.some(genre => genre.includes(searchTerm))) {
                            card.style.display = '';
                            visibleCount++;
                        } else {
                            card.style.display = 'none';
                        }
                    });
                    
                    // Show/hide empty state
                    if (emptySearchState) {
                        if (visibleCount === 0 && searchTerm !== '') {
                            emptySearchState.classList.remove('hidden');
                        } else {
                            emptySearchState.classList.add('hidden');
                        }
                    }
                });
                
                // Reset search button
                if (resetSearchBtn) {
                    resetSearchBtn.addEventListener('click', function() {
                        searchInput.value = '';
                        searchInput.dispatchEvent(new Event('input'));
                    });
                }
            }
        });
    </script>
{% endblock %}
